version: 2

jobs:
  build:
    docker:
       - image: centos:7
#      - image: avatarnewyork/dockerenv-apache:php71
#      - image: avatarnewyork/dockerenv-mysql:percona56

    steps:      
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
            
      - run:
          name: Install Docker Compose (v1.2.0)
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          
      - setup_remote_docker

      - run:
          name: Load / Populate Cache Images
          command: |
            mkdir -p ~/docker
            if [[ ! -e ~/docker/dockerenv_apache.tar ]]; then docker pull "avatarnewyork/dockerenv-apache:$DOCKERENV_APACHE_TAG" && docker save "avatarnewyork/dockerenv-apache:$DOCKERENV_APACHE_TAG" > ~/docker/dockerenv_apache.tar; else docker load -i ~/docker/dockerenv_apache.tar; fi
            if [[ ! -e ~/docker/dockerenv_mysql.tar ]]; then docker pull "avatarnewyork/dockerenv-mysql:$DOCKERENV_MYSQL_TAG" && docker save "avatarnewyork/dockerenv-mysql:$DOCKERENV_MYSQL_TAG" > ~/docker/dockerenv_mysql.tar; else docker load -i ~/docker/dockerenv_mysql.tar; fi
    
      - run:
          name: Composer Up
          command: |
            set -x
            docker-compose -f /root/project/.circleci/config/docker-compose2.yml up -d

      - run:
          name: Copy Project
          command: |
            docker cp /root/project config_web_1:/var/project
            docker exec -ti config_web_1 sh -c 'cp -a /var/project/* /var/www/'
            docker exec -ti config_web_1 sh -c 'rmdir /var/www/html'
            docker exec -ti config_web_1 sh -c 'mv /var/www/public /var/www/html'
            docker cp /root/project/data/db.sql.gz.enc config_db_1:/root
            
      - run:
          name: DB decrypt/import
          command: |
            if [[ -f ~/project/data/db.sql.gz.enc ]]; then docker exec -ti config_db_1 openssl aes-256-cbc -k "$OPENSSL_PASS" -in ~/db.sql.gz.enc -out ~/db.sql.gz -d; fi
            sleep 10; docker exec -ti config_db_1 sh -c 'zcat ~/db.sql.gz | mysql -uroot test'
            
      - run:
          name: Setup ngrok
          command: |
            docker cp /root/project/.circleci/files/ngrok-stable-linux-amd64.zip config_web_1:/root
            docker exec -ti config_web_1 unzip -d /root /root/ngrok-stable-linux-amd64.zip
            
      - run:
          name: Start ngrok
          command: |
            docker exec -ti config_web_1 ~/ngrok authtoken $NGROK_TOKEN
            docker exec -ti -e CIRCLE_SHA1=$CIRCLE_SHA1 config_web_1 ~/ngrok http -inspect=false -log=stdout -subdomain=$CIRCLE_SHA1 80 > /dev/null &
            #docker exec -ti config_web_1 curl --retry 10 --retry-delay 10 -v https://$CIRCLE_SHA1.ngrok.io

      - run:
          name: Ghost Inspector Tests
          command: |
            docker exec -ti -e CIRCLE_SHA1=$CIRCLE_SHA1 config_web_1 curl "https://api.ghostinspector.com/v1/suites/$GHOST_SUITE_ID/execute/?apiKey=$GHOST_API_KEY&startUrl=https://$CIRCLE_SHA1.ngrok.io" > $CIRCLE_ARTIFACTS/ghostinspector.json
